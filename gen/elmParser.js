// Copied from https://github.com/rundis/elm-light/blob/78d3d0f918f6ad9435d6a2616bbb39ae40adfb7a/node/elmparser.js

module.exports = (function () {
  'use strict'

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass (child, parent) {
    function ctor () { this.constructor = child }
    ctor.prototype = parent.prototype
    child.prototype = new ctor()
  }

  function peg$SyntaxError (message, expected, found, location) {
    this.message = message
    this.expected = expected
    this.found = found
    this.location = location
    this.name = 'SyntaxError'

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, peg$SyntaxError)
    }
  }

  peg$subclass(peg$SyntaxError, Error)

  function peg$parse (input) {
    var options = arguments.length > 1 ? arguments[1] : {},
      parser = this,

      peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart, headerOnly: peg$parseheaderOnly },
      peg$startRuleFunction = peg$parsestart,

      peg$c0 = function (module) { return module },
      peg$c1 = function (declaration, d) { return d },
      peg$c2 = function (declaration) { return null },
      peg$c3 = function (declaration, moduleDoc, imports, toplevel) {
        return {
              	moduleDeclaration: declaration ? declaration[0] : null,
          doc: moduleDoc,
          imports: imports || [],
          declarations: toplevel || []
        }
      },
      peg$c4 = { type: 'any', description: 'any character' },
      peg$c5 = function (declaration, moduleDoc, imports) {
              	return {
                moduleDeclaration: declaration,
                doc: moduleDoc,
                imports: imports || []
              }
      },
      peg$c6 = 'effect',
      peg$c7 = { type: 'literal', value: 'effect', description: '"effect"' },
      peg$c8 = 'port',
      peg$c9 = { type: 'literal', value: 'port', description: '"port"' },
      peg$c10 = function (type) { return type },
      peg$c11 = 'module',
      peg$c12 = { type: 'literal', value: 'module', description: '"module"' },
      peg$c13 = function (type, name, exposing) {
        return {
          type: (type || '') + ' module'.trim(),
          value: name,
          exposing: exposing,
          location: location()
        }
      },
      peg$c14 = 'where',
      peg$c15 = { type: 'literal', value: 'where', description: '"where"' },
      peg$c16 = '{',
      peg$c17 = { type: 'literal', value: '{', description: '"{"' },
      peg$c18 = '}',
      peg$c19 = { type: 'literal', value: '}', description: '"}"' },
      peg$c20 = function (first, imp) { return imp },
      peg$c21 = function (first, rest) {
        var imps = [first].concat(rest)
        var start = first.location.start
        var end = imps[imps.length - 1].location.end

        return {
          type: 'imports',
              	imports: imps,
          location: {start: start, end: end}
        }
      },
      peg$c22 = 'import',
      peg$c23 = { type: 'literal', value: 'import', description: '"import"' },
      peg$c24 = 'as',
      peg$c25 = { type: 'literal', value: 'as', description: '"as"' },
      peg$c26 = function (module, id) { return id },
      peg$c27 = function (module, alias, exp) { return exp },
      peg$c28 = function (module, alias, exposing) {
        return {
              	type: 'import',
          value: module,
          alias: alias,
          exposing: exposing,
          location: location()
        }
      },
      peg$c29 = 'exposing',
      peg$c30 = { type: 'literal', value: 'exposing', description: '"exposing"' },
      peg$c31 = '(',
      peg$c32 = { type: 'literal', value: '(', description: '"("' },
      peg$c33 = ')',
      peg$c34 = { type: 'literal', value: ')', description: '")"' },
      peg$c35 = function (exports) {
            	return {
            		type: 'exposing',
              exports: exports,
              location: location()
            }
      },
      peg$c36 = '..',
      peg$c37 = { type: 'literal', value: '..', description: '".."' },
      peg$c38 = function () {
        return {
              	type: 'exports',
          exports: [{ type: 'exposeAll'}],
          location: location()
        }
      },
      peg$c39 = ',',
      peg$c40 = { type: 'literal', value: ',', description: '","' },
      peg$c41 = function (first, e) { return e },
      peg$c42 = function (first, rest) {
        return {
              	type: 'exports',
          exports: [first].concat(rest),
          location: location()
        }
      },
      peg$c43 = function (name, exps) { return exps },
      peg$c44 = function (name, subexps) {
        return {
              	type: 'adt',
          value: name,
          exports: subexps
        }
      },
      peg$c45 = function (expAll) {
            	return expAll
      },
      peg$c46 = function (first, s) { return s },
      peg$c47 = function (first, rest) {
            	return {
              type: 'exports',
              exports: [first].concat(rest),
              location: location()
            }
      },
      peg$c48 = function (name) {
        return {
              	type: 'adtsub',
          value: name
        }
      },
      peg$c49 = function (doc, decl) { var retVal = decl; retVal['doc'] = doc; return retVal },
      peg$c50 = function (first, doc, decl) { var retVal = decl; retVal['doc'] = doc; return retVal },
      peg$c51 = function (first, rest) {
            	return [first].concat(rest)
      },
      peg$c52 = function (decl) {
        decl.location = location()
        return decl
      },
      peg$c53 = function (d) { return d },
      peg$c54 = function () { return null },
      peg$c55 = 'type',
      peg$c56 = { type: 'literal', value: 'type', description: '"type"' },
      peg$c57 = 'alias',
      peg$c58 = { type: 'literal', value: 'alias', description: '"alias"' },
      peg$c59 = function (name, p) { return p },
      peg$c60 = '=',
      peg$c61 = { type: 'literal', value: '=', description: '"="' },
      peg$c62 = function (name, params, type) {
        return {
              	type: 'typeAliasDecl',
          value: name,
          params: params,
          tipe: type
                // expr: exp
        }
      },
      peg$c63 = function (name, params, type, tail) {
        return {
              	type: 'typeAliasDecl',
          value: name,
          params: params,
          tipe: {
            type: 'typeFun',
            signature: [type].concat(tail.signature)
          }
        }
      },
      peg$c64 = function (name, params, adtDefs) {
        return {
              	type: 'typeDecl',
          value: name,
          params: params,
          adtDefs: adtDefs
                // expr: expr
        }
      },
      peg$c65 = '|',
      peg$c66 = { type: 'literal', value: '|', description: '"|"' },
      peg$c67 = function (first, a) { return a },
      peg$c68 = function (first, rest) { return [first].concat(rest) },
      peg$c69 = function (name, t) { return t },
      peg$c70 = function (name, first, t) { return t },
      peg$c71 = function (name, first, rest) {
        return {
              	type: 'adtDef',
          value: name,
          params: first ? [first].concat(rest) : [],
          paramsRaw: first ? name + ' : ' + text().replace(name, '').trim() : '',
          location: location()
        }
      },
      peg$c72 = function (ann, val) {
        val['annotation'] = ann
        return val
      },
      peg$c73 = function (val) {
        val['annotation'] = null
        return val
      },
      peg$c74 = function (id, first, p) { return p },
      peg$c75 = function (id, first, rest) { return [first].concat(rest) },
      peg$c76 = function (id, patterns, expr) {
        return {
              	type: 'nameDef',
          value: id,
          patterns: patterns || []
                // expr: expr
        }
      },
      peg$c77 = function (binOp, first, p) { return p },
      peg$c78 = function (binOp, first, rest) { return [first].concat(rest) },
      peg$c79 = function (binOp, patterns, expr) {
        return {
              	type: 'binOpDef',
          value: binOp.value,
          patterns: patterns || []
                // expr: expr
        }
      },
      peg$c80 = ':',
      peg$c81 = { type: 'literal', value: ':', description: '":"' },
      peg$c82 = '->',
      peg$c83 = { type: 'literal', value: '->', description: '"->"' },
      peg$c84 = function (ref, first, t) { return t },
      peg$c85 = function (ref, first, rest) { return {raw: text(), signature: [first].concat(rest) } },
      peg$c86 = function (ref, sig) {
        var tipe = ref.type === 'binOpRef' ? 'binOpDef' : 'nameDef'
        return {
              	type: tipe,
          value: ref.value,
          signature: sig.signature,
          signatureRaw: text(),
          signatureRawSansName: sig.raw,
          location: location()
        }
      },
      peg$c87 = 'infixr',
      peg$c88 = { type: 'literal', value: 'infixr', description: '"infixr"' },
      peg$c89 = 'infixl',
      peg$c90 = { type: 'literal', value: 'infixl', description: '"infixl"' },
      peg$c91 = 'infix',
      peg$c92 = { type: 'literal', value: 'infix', description: '"infix"' },
      peg$c93 = function (fix, fixity, op) {
        return {
              	type: 'infixDef',
          value: fix,
          fixity: fixity,
          op: op
        }
      },
      peg$c94 = '`',
      peg$c95 = { type: 'literal', value: '`', description: '"`"' },
      peg$c96 = function (op) {
        return {
          type: 'infixOp',
          value: op
        }
      },
      peg$c97 = function (ann) {
          	return {
            type: 'portDef',
            value: ann.value,
            signature: ann.signature,
            signatureRaw: text(),
            signatureRawSansName: ann.signatureRawSansName
          }
      },
      peg$c98 = function (first, t) { return t },
      peg$c99 = function (first, rest) {
        return {
          type: 'typeTuple',
          elements: [first].concat(rest)
        }
      },
      peg$c100 = function (first, tail) {
        return {
          type: 'typeFun',
          signature: [first].concat(tail.signature)
        }
      },
      peg$c101 = function (t) { return t },
      peg$c102 = function (value) {
        return {
          type: 'typeBracket',
          element: value
        }
      },
      peg$c103 = function (first, t) { return t },
      peg$c104 = function (first, rest) {
        return {
              	type: 'funTail',
          signature: [first].concat(rest)
        }
      },
      peg$c105 = function () {
        return {
          type: 'unit'
        }
      },
      peg$c106 = function (val, first, t) { return t },
      peg$c107 = function (val, first, rest) { return [first].concat(rest) },
      peg$c108 = function (val, params) {
        return {
          type: 'typeAdt',
          value: val,
          params: params || []
        }
      },
      peg$c109 = function (val) {
        return {
          type: 'typeVar',
          value: val
        }
      },
      peg$c110 = function (first, r) { return r },
      peg$c111 = function (first, rest) { return [first].concat(rest) },
      peg$c112 = function (rs) {
        return {
              	type: 'typeRec',
          fieldDefs: rs || [],
          location: location(),
          signatureRaw: text()
        }
      },
      peg$c113 = function (id, first, r) { return r },
      peg$c114 = function (id, first, rest) { return [first].concat(rest) },
      peg$c115 = function (id, rs) {
        return {
              	type: 'typeRecExt',
          param: id,
          fieldDefs: rs || []
        }
      },
      peg$c116 = function (id, first, tail) {
            	var fun = {
                	type: 'typeFun',
              signature: [first].concat(tail.signature)
            }

        return {
                	type: 'typeRecBind',
          name: id,
          tipe: fun,
          location: location(),
          signatureRaw: text()
        }
      },
      peg$c117 = function (id, type) {
        return {
              	type: 'typeRecBind',
          name: id,
          tipe: type,
          location: location(),
          signatureRaw: text()
        }
      },
      peg$c118 = function (value) {
        return {
          type: 'patternBracket',
          pattern: value
        }
      },
      peg$c119 = function (first, p) { return p },
      peg$c120 = function (first, rest) {
        return {
          type: 'patternTuple',
          patterns: [first].concat(rest)
        }
      },
      peg$c121 = function (p, alias) {
            	return {
                	type: 'patternTupleElem',
              value: p,
              alias: alias
            }
      },
      peg$c122 = function (p, alias) {
        return {
              	type: 'pattern',
          value: p,
          alias: alias
        }
      },
      peg$c123 = function (id) { return id },
      peg$c124 = '[',
      peg$c125 = { type: 'literal', value: '[', description: '"["' },
      peg$c126 = ']',
      peg$c127 = { type: 'literal', value: ']', description: '"]"' },
      peg$c128 = function (first, rest) {
        return {
          type: 'patternList',
          patterns: [first].concat(rest)
        }
      },
      peg$c129 = function (ps) {
        return {
              	type: 'patternRec',
          patterns: ps || []
        }
      },
      peg$c130 = function (id) {
        return {
              	type: 'variable',
          value: id
        }
      },
      peg$c131 = function (adt, p) { return p },
      peg$c132 = function (adt, vars) {
        return {
              	type: 'patternAdt',
          value: adt,
          variables: vars
        }
      },
      peg$c133 = '_',
      peg$c134 = { type: 'literal', value: '_', description: '"_"' },
      peg$c135 = function () { return {type: 'unnamed'} },
      peg$c136 = '--',
      peg$c137 = { type: 'literal', value: '--', description: '"--"' },
      peg$c138 = function (dill) { return text() },
      peg$c139 = function (id) {
        return {
          type: 'ref',
          value: id
        }
      },
      peg$c140 = '.',
      peg$c141 = { type: 'literal', value: '.', description: '"."' },
      peg$c142 = function (first, rest) {
        return first + rest.map(function (sub) {
          return sub.join('')
        }).join('')
      },
      peg$c143 = function (first, rest) { return first + rest.join('') },
      peg$c144 = function (up, id) {
        return {
              	type: 'prefixedId',
          prefix: up,
          id: id
        }
      },
      peg$c145 = function (a) { return a },
      peg$c146 = { type: 'other', description: 'comment' },
      peg$c147 = '{-|',
      peg$c148 = { type: 'literal', value: '{-|', description: '"{-|"' },
      peg$c149 = '-}',
      peg$c150 = { type: 'literal', value: '-}', description: '"-}"' },
      peg$c151 = function (d) { return '{-' + d + '-}' },
      peg$c152 = function (m) { return m },
      peg$c153 = function (s) { return s },
      peg$c154 = function (char) { return char },
      peg$c155 = function (commentChars) { return commentChars.join('') },
      peg$c156 = '{-',
      peg$c157 = { type: 'literal', value: '{-', description: '"{-"' },
      peg$c158 = function (d) { return d },
      peg$c159 = function (h) { return h },
      peg$c160 = function (chars) { return '{-' + chars.join('') + '}' },
      peg$c161 = '"""',
      peg$c162 = { type: 'literal', value: '"""', description: '"\\"\\"\\""' },
      peg$c163 = 'if',
      peg$c164 = { type: 'literal', value: 'if', description: '"if"' },
      peg$c165 = 'then',
      peg$c166 = { type: 'literal', value: 'then', description: '"then"' },
      peg$c167 = 'else',
      peg$c168 = { type: 'literal', value: 'else', description: '"else"' },
      peg$c169 = 'let',
      peg$c170 = { type: 'literal', value: 'let', description: '"let"' },
      peg$c171 = 'in',
      peg$c172 = { type: 'literal', value: 'in', description: '"in"' },
      peg$c173 = 'case',
      peg$c174 = { type: 'literal', value: 'case', description: '"case"' },
      peg$c175 = 'of',
      peg$c176 = { type: 'literal', value: 'of', description: '"of"' },
      peg$c177 = "'",
      peg$c178 = { type: 'literal', value: "'", description: "\"'\"" },
      peg$c179 = /^[A-Z]/,
      peg$c180 = { type: 'class', value: '[A-Z]', description: '[A-Z]' },
      peg$c181 = /^[a-z]/,
      peg$c182 = { type: 'class', value: '[a-z]', description: '[a-z]' },
      peg$c183 = /^[0-9]/,
      peg$c184 = { type: 'class', value: '[0-9]', description: '[0-9]' },
      peg$c185 = function (binOp) {
        return {
              	type: 'binOpRef',
          value: binOp.value
        }
      },
      peg$c186 = function (first, rest) {
        var binOp = first + rest.join('')
        validateBinOp(binOp)
        return {
          type: 'binOp',
          value: binOp
        }
      },
      peg$c187 = '+',
      peg$c188 = { type: 'literal', value: '+', description: '"+"' },
      peg$c189 = '-',
      peg$c190 = { type: 'literal', value: '-', description: '"-"' },
      peg$c191 = '*',
      peg$c192 = { type: 'literal', value: '*', description: '"*"' },
      peg$c193 = '&',
      peg$c194 = { type: 'literal', value: '&', description: '"&"' },
      peg$c195 = '%',
      peg$c196 = { type: 'literal', value: '%', description: '"%"' },
      peg$c197 = '^',
      peg$c198 = { type: 'literal', value: '^', description: '"^"' },
      peg$c199 = '<',
      peg$c200 = { type: 'literal', value: '<', description: '"<"' },
      peg$c201 = '>',
      peg$c202 = { type: 'literal', value: '>', description: '">"' },
      peg$c203 = '$',
      peg$c204 = { type: 'literal', value: '$', description: '"$"' },
      peg$c205 = '@',
      peg$c206 = { type: 'literal', value: '@', description: '"@"' },
      peg$c207 = '#',
      peg$c208 = { type: 'literal', value: '#', description: '"#"' },
      peg$c209 = '/',
      peg$c210 = { type: 'literal', value: '/', description: '"/"' },
      peg$c211 = '?',
      peg$c212 = { type: 'literal', value: '?', description: '"?"' },
      peg$c213 = '~',
      peg$c214 = { type: 'literal', value: '~', description: '"~"' },
      peg$c215 = '!',
      peg$c216 = { type: 'literal', value: '!', description: '"!"' },
      peg$c217 = /^[\n\r\u2028\u2029]/,
      peg$c218 = { type: 'class', value: '[\\n\\r\\u2028\\u2029]', description: '[\\n\\r\\u2028\\u2029]' },
      peg$c219 = { type: 'other', description: 'end of line' },
      peg$c220 = '\n',
      peg$c221 = { type: 'literal', value: '\n', description: '"\\n"' },
      peg$c222 = '\r\n',
      peg$c223 = { type: 'literal', value: '\r\n', description: '"\\r\\n"' },
      peg$c224 = '\r',
      peg$c225 = { type: 'literal', value: '\r', description: '"\\r"' },
      peg$c226 = '\u2028',
      peg$c227 = { type: 'literal', value: '\u2028', description: '"\\u2028"' },
      peg$c228 = '\u2029',
      peg$c229 = { type: 'literal', value: '\u2029', description: '"\\u2029"' },
      peg$c230 = { type: 'other', description: 'newline' },
      peg$c231 = { type: 'other', description: 'whitespace' },
      peg$c232 = '\t',
      peg$c233 = { type: 'literal', value: '\t', description: '"\\t"' },
      peg$c234 = '\x0B',
      peg$c235 = { type: 'literal', value: '\x0B', description: '"\\x0B"' },
      peg$c236 = '\f',
      peg$c237 = { type: 'literal', value: '\f', description: '"\\f"' },
      peg$c238 = ' ',
      peg$c239 = { type: 'literal', value: ' ', description: '" "' },
      peg$c240 = '\xA0',
      peg$c241 = { type: 'literal', value: '\xA0', description: '"\\xA0"' },
      peg$c242 = '\uFEFF',
      peg$c243 = { type: 'literal', value: '\uFEFF', description: '"\\uFEFF"' },

      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{ line: 1, column: 1, seenCR: false }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,

      peg$result

    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + '".')
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
    }

    function text () {
      return input.substring(peg$savedPos, peg$currPos)
    }

    function location () {
      return peg$computeLocation(peg$savedPos, peg$currPos)
    }

    function expected (description) {
      throw peg$buildException(
        null,
        [{ type: 'other', description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      )
    }

    function error (message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      )
    }

    function peg$computePosDetails (pos) {
      var details = peg$posDetailsCache[pos],
        p, ch

      if (details) {
        return details
      } else {
        p = pos - 1
        while (!peg$posDetailsCache[p]) {
          p--
        }

        details = peg$posDetailsCache[p]
        details = {
          line: details.line,
          column: details.column,
          seenCR: details.seenCR
        }

        while (p < pos) {
          ch = input.charAt(p)
          if (ch === '\n') {
            if (!details.seenCR) { details.line++ }
            details.column = 1
            details.seenCR = false
          } else if (ch === '\r' || ch === '\u2028' || ch === '\u2029') {
            details.line++
            details.column = 1
            details.seenCR = true
          } else {
            details.column++
            details.seenCR = false
          }

          p++
        }

        peg$posDetailsCache[pos] = details
        return details
      }
    }

    function peg$computeLocation (startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos)

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      }
    }

    function peg$fail (expected) {
      if (peg$currPos < peg$maxFailPos) { return }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos
        peg$maxFailExpected = []
      }

      peg$maxFailExpected.push(expected)
    }

    function peg$buildException (message, expected, found, location) {
      function cleanupExpected (expected) {
        var i = 1

        expected.sort(function (a, b) {
          if (a.description < b.description) {
            return -1
          } else if (a.description > b.description) {
            return 1
          } else {
            return 0
          }
        })

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1)
          } else {
            i++
          }
        }
      }

      function buildMessage (expected, found) {
        function stringEscape (s) {
          function hex (ch) { return ch.charCodeAt(0).toString(16).toUpperCase() }

          return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\f/g, '\\f')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
            .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) { return '\\x' + hex(ch) })
            .replace(/[\u0100-\u0FFF]/g, function (ch) { return '\\u0' + hex(ch) })
            .replace(/[\u1000-\uFFFF]/g, function (ch) { return '\\u' + hex(ch) })
        }

        var expectedDescs = new Array(expected.length),
          expectedDesc, foundDesc, i

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(', ')
              + ' or '
              + expectedDescs[expected.length - 1]
          : expectedDescs[0]

        foundDesc = found ? '"' + stringEscape(found) + '"' : 'end of input'

        return 'Expected ' + expectedDesc + ' but ' + foundDesc + ' found.'
      }

      if (expected !== null) {
        cleanupExpected(expected)
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      )
    }

    function peg$parsestart () {
      var s0, s1

      s0 = peg$currPos
      s1 = peg$parsemodule()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c0(s1)
      }
      s0 = s1

      return s0
    }

    function peg$parsemodule () {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      s1 = peg$currPos
      s2 = peg$parsemoduleDeclaration()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEOS()
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3]
          s1 = s2
        } else {
          peg$currPos = s1
          s1 = peg$FAILED
        }
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
      if (s1 === peg$FAILED) {
        s1 = null
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parseMANDATORY_LAYOUT()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDocComment()
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos
            peg$silentFails++
            s6 = peg$parseMANDATORY_LAYOUT()
            peg$silentFails--
            if (s6 !== peg$FAILED) {
              peg$currPos = s5
              s5 = void 0
            } else {
              s5 = peg$FAILED
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s2
              s3 = peg$c1(s1, s4)
              s2 = s3
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos
          s3 = peg$parseLAYOUT()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c2(s1)
          }
          s2 = s3
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseimports()
          if (s3 === peg$FAILED) {
            s3 = null
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetopLevelDeclarations()
            if (s4 === peg$FAILED) {
              s4 = null
            }
            if (s4 !== peg$FAILED) {
              s5 = []
              s6 = peg$parseComment()
              if (s6 === peg$FAILED) {
                s6 = peg$parseNewLine()
                if (s6 === peg$FAILED) {
                  s6 = peg$parseWhiteSpace()
                }
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                s6 = peg$parseComment()
                if (s6 === peg$FAILED) {
                  s6 = peg$parseNewLine()
                  if (s6 === peg$FAILED) {
                    s6 = peg$parseWhiteSpace()
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c3(s1, s2, s3, s4)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseheaderOnly () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      s1 = peg$parsemoduleDeclaration()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOS()
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          s4 = peg$parseMANDATORY_LAYOUT()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDocComment()
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos
              peg$silentFails++
              s7 = peg$parseMANDATORY_LAYOUT()
              peg$silentFails--
              if (s7 !== peg$FAILED) {
                peg$currPos = s6
                s6 = void 0
              } else {
                s6 = peg$FAILED
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c1(s1, s5)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos
            s4 = peg$parseLAYOUT()
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c2(s1)
            }
            s3 = s4
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseimports()
            if (s4 === peg$FAILED) {
              s4 = null
            }
            if (s4 !== peg$FAILED) {
              s5 = []
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c4) }
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                if (input.length > peg$currPos) {
                  s6 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s6 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c4) }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c5(s1, s3, s4)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsemoduleDeclaration () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8

      s0 = peg$currPos
      s1 = peg$currPos
      if (input.substr(peg$currPos, 6) === peg$c6) {
        s2 = peg$c6
        peg$currPos += 6
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c7) }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c8) {
          s2 = peg$c8
          peg$currPos += 4
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c9) }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1
          s2 = peg$c10(s2)
          s1 = s2
        } else {
          peg$currPos = s1
          s1 = peg$FAILED
        }
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
      if (s1 === peg$FAILED) {
        s1 = null
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c11) {
          s2 = peg$c11
          peg$currPos += 6
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c12) }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__()
          if (s3 !== peg$FAILED) {
            s4 = peg$parseupperIds()
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__()
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos
                s7 = peg$parseeffectWhere()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__()
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8]
                    s6 = s7
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
                if (s6 === peg$FAILED) {
                  s6 = null
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexposing()
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c13(s1, s4, s7)
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseeffectWhere () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

      s0 = peg$currPos
      if (input.substr(peg$currPos, 5) === peg$c14) {
        s1 = peg$c14
        peg$currPos += 5
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c15) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c16
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c17) }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos
              s6 = []
              s7 = peg$currPos
              s8 = peg$currPos
              peg$silentFails++
              if (input.charCodeAt(peg$currPos) === 125) {
                s9 = peg$c18
                peg$currPos++
              } else {
                s9 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c19) }
              }
              peg$silentFails--
              if (s9 === peg$FAILED) {
                s8 = void 0
              } else {
                peg$currPos = s8
                s8 = peg$FAILED
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseSourceCharacter()
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9]
                  s7 = s8
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7)
                s7 = peg$currPos
                s8 = peg$currPos
                peg$silentFails++
                if (input.charCodeAt(peg$currPos) === 125) {
                  s9 = peg$c18
                  peg$currPos++
                } else {
                  s9 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c19) }
                }
                peg$silentFails--
                if (s9 === peg$FAILED) {
                  s8 = void 0
                } else {
                  peg$currPos = s8
                  s8 = peg$FAILED
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseSourceCharacter()
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9]
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_()
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c18
                    peg$currPos++
                  } else {
                    s8 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c19) }
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8]
                    s5 = s6
                  } else {
                    peg$currPos = s5
                    s5 = peg$FAILED
                  }
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseimports () {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      s1 = peg$parseLAYOUT()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseimport()
        if (s2 !== peg$FAILED) {
          s3 = []
          s4 = peg$currPos
          s5 = peg$parseLAYOUT()
          if (s5 !== peg$FAILED) {
            s6 = peg$parseimport()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c20(s2, s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            s4 = peg$currPos
            s5 = peg$parseLAYOUT()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseimport()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4
                s5 = peg$c20(s2, s6)
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c21(s2, s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseimport () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8

      s0 = peg$currPos
      if (input.substr(peg$currPos, 6) === peg$c22) {
        s1 = peg$c22
        peg$currPos += 6
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c23) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseupperIds()
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos
            s5 = peg$parse__()
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c24) {
                s6 = peg$c24
                peg$currPos += 2
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c25) }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseupperId()
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s4
                    s5 = peg$c26(s3, s8)
                    s4 = s5
                  } else {
                    peg$currPos = s4
                    s4 = peg$FAILED
                  }
                } else {
                  peg$currPos = s4
                  s4 = peg$FAILED
                }
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
            if (s4 === peg$FAILED) {
              s4 = null
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos
              s6 = peg$parse_()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexposing()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5
                  s6 = peg$c27(s3, s4, s7)
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
              if (s5 === peg$FAILED) {
                s5 = null
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseEOS()
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c28(s3, s4, s5)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseexposing () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      if (input.substr(peg$currPos, 8) === peg$c29) {
        s1 = peg$c29
        peg$currPos += 8
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c30) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c31
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c32) }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexposeAll()
              if (s5 === peg$FAILED) {
                s5 = peg$parseexports()
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_()
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c33
                    peg$currPos++
                  } else {
                    s7 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c34) }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c35(s5)
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseexposeAll () {
      var s0, s1

      s0 = peg$currPos
      if (input.substr(peg$currPos, 2) === peg$c36) {
        s1 = peg$c36
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c37) }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c38()
      }
      s0 = s1

      return s0
    }

    function peg$parseexports () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      s1 = peg$parseexport()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parse_()
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c39
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c40) }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexport()
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c41(s1, s7)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c39
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c40) }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexport()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3
                  s4 = peg$c41(s1, s7)
                  s3 = s4
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c42(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseexport () {
      var s0

      s0 = peg$parseref()
      if (s0 === peg$FAILED) {
        s0 = peg$parseadtExport()
      }

      return s0
    }

    function peg$parseadtExport () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8

      s0 = peg$currPos
      s1 = peg$parseupperId()
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c31
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c32) }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseadtSubExports()
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_()
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c33
                    peg$currPos++
                  } else {
                    s8 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c34) }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s2
                    s3 = peg$c43(s1, s6)
                    s2 = s3
                  } else {
                    peg$currPos = s2
                    s2 = peg$FAILED
                  }
                } else {
                  peg$currPos = s2
                  s2 = peg$FAILED
                }
              } else {
                peg$currPos = s2
                s2 = peg$FAILED
              }
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
          s2 = null
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c44(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseadtSubExports () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      s1 = peg$parseexposeAll()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c45(s1)
      }
      s0 = s1
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = peg$parseadtSubExport()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$currPos
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c39
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c40) }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseadtSubExport()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3
                  s4 = peg$c46(s1, s7)
                  s3 = s4
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$currPos
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c39
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c40) }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_()
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseadtSubExport()
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3
                    s4 = peg$c46(s1, s7)
                    s3 = s4
                  } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                  }
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c47(s1, s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      }

      return s0
    }

    function peg$parseadtSubExport () {
      var s0, s1

      s0 = peg$currPos
      s1 = peg$parseupperId()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c48(s1)
      }
      s0 = s1

      return s0
    }

    function peg$parsetopLevelDeclarations () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$currPos
      s2 = peg$parsetopLevelDoc()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetopLevelDeclaration()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1
          s2 = peg$c49(s2, s3)
          s1 = s2
        } else {
          peg$currPos = s1
          s1 = peg$FAILED
        }
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsetopLevelDoc()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetopLevelDeclaration()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3
            s4 = peg$c50(s1, s4, s5)
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsetopLevelDoc()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetopLevelDeclaration()
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c50(s1, s4, s5)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c51(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetopLevelDeclaration () {
      var s0, s1

      s0 = peg$currPos
      s1 = peg$parsetypeAliasFunDecl()
      if (s1 === peg$FAILED) {
        s1 = peg$parsetypeAliasDecl()
        if (s1 === peg$FAILED) {
          s1 = peg$parsetypeDecl()
          if (s1 === peg$FAILED) {
            s1 = peg$parsedef()
            if (s1 === peg$FAILED) {
              s1 = peg$parseinfixDef()
              if (s1 === peg$FAILED) {
                s1 = peg$parseportDef()
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c52(s1)
      }
      s0 = s1

      return s0
    }

    function peg$parsetopLevelDoc () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parseMANDATORY_LAYOUT()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDocComment()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMANDATORY_LAYOUT()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c53(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = peg$parseLAYOUT()
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c54()
        }
        s0 = s1
      }

      return s0
    }

    function peg$parsetypeAliasDecl () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

      s0 = peg$currPos
      if (input.substr(peg$currPos, 4) === peg$c55) {
        s1 = peg$c55
        peg$currPos += 4
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c56) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__()
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c57) {
            s3 = peg$c57
            peg$currPos += 5
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c58) }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
              s5 = peg$parseupperId()
              if (s5 !== peg$FAILED) {
                s6 = []
                s7 = peg$currPos
                s8 = peg$parse__()
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsevariable()
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7
                    s8 = peg$c59(s5, s9)
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7)
                  s7 = peg$currPos
                  s8 = peg$parse__()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsevariable()
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7
                      s8 = peg$c59(s5, s9)
                      s7 = s8
                    } else {
                      peg$currPos = s7
                      s7 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_()
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s8 = peg$c60
                      peg$currPos++
                    } else {
                      s8 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c61) }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_()
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetype()
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0
                          s1 = peg$c62(s5, s6, s10)
                          s0 = s1
                        } else {
                          peg$currPos = s0
                          s0 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeAliasFunDecl () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12

      s0 = peg$currPos
      if (input.substr(peg$currPos, 4) === peg$c55) {
        s1 = peg$c55
        peg$currPos += 4
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c56) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__()
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c57) {
            s3 = peg$c57
            peg$currPos += 5
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c58) }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
              s5 = peg$parseupperId()
              if (s5 !== peg$FAILED) {
                s6 = []
                s7 = peg$currPos
                s8 = peg$parse__()
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsevariable()
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7
                    s8 = peg$c59(s5, s9)
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7)
                  s7 = peg$currPos
                  s8 = peg$parse__()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsevariable()
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7
                      s8 = peg$c59(s5, s9)
                      s7 = s8
                    } else {
                      peg$currPos = s7
                      s7 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_()
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s8 = peg$c60
                      peg$currPos++
                    } else {
                      s8 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c61) }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_()
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetype()
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parse_()
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsetypeFunTail()
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0
                              s1 = peg$c63(s5, s6, s10, s12)
                              s0 = s1
                            } else {
                              peg$currPos = s0
                              s0 = peg$FAILED
                            }
                          } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                          }
                        } else {
                          peg$currPos = s0
                          s0 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeDecl () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8

      s0 = peg$currPos
      if (input.substr(peg$currPos, 4) === peg$c55) {
        s1 = peg$c55
        peg$currPos += 4
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c56) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseupperId()
          if (s3 !== peg$FAILED) {
            s4 = []
            s5 = peg$currPos
            s6 = peg$parse__()
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevariable()
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5
                s6 = peg$c59(s3, s7)
                s5 = s6
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5)
              s5 = peg$currPos
              s6 = peg$parse__()
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevariable()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5
                  s6 = peg$c59(s3, s7)
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_()
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s6 = peg$c60
                  peg$currPos++
                } else {
                  s6 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c61) }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_()
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseadtDefs()
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0
                      s1 = peg$c64(s3, s4, s8)
                      s0 = s1
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseadtDefs () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      s1 = peg$parseadtDef()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parse_()
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c65
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c66) }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseadtDef()
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c67(s1, s7)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s5 = peg$c65
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c66) }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseadtDef()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3
                  s4 = peg$c67(s1, s7)
                  s3 = s4
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c68(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseadtDef () {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      s1 = peg$parseupperId()
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parse__()
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetype()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c69(s1, s4)
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
          s2 = null
        }
        if (s2 !== peg$FAILED) {
          s3 = []
          s4 = peg$currPos
          s5 = peg$parse__()
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetype()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c70(s1, s2, s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            s4 = peg$currPos
            s5 = peg$parse__()
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetype()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4
                s5 = peg$c70(s1, s2, s6)
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c71(s1, s2, s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsedef () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parseannotation()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLAYOUT()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalueDef()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c72(s1, s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = peg$parsevalueDef()
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c73(s1)
        }
        s0 = s1
      }

      return s0
    }

    function peg$parsevalueDef () {
      var s0

      s0 = peg$parsenameDef()
      if (s0 === peg$FAILED) {
        s0 = peg$parsebinOpDef()
      }

      return s0
    }

    function peg$parsenameDef () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

      s0 = peg$currPos
      s1 = peg$parseid()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          s4 = peg$parsepattern()
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__()
            if (s5 !== peg$FAILED) {
              s6 = []
              s7 = peg$currPos
              s8 = peg$parse_()
              if (s8 !== peg$FAILED) {
                s9 = peg$parsepattern()
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7
                  s8 = peg$c74(s1, s4, s9)
                  s7 = s8
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7)
                s7 = peg$currPos
                s8 = peg$parse_()
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsepattern()
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7
                    s8 = peg$c74(s1, s4, s9)
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c75(s1, s4, s6)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          if (s3 === peg$FAILED) {
            s3 = null
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c60
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c61) }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr()
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c76(s1, s3, s6)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsebinOpDef () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

      s0 = peg$currPos
      s1 = peg$parsebinOpRef()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          s4 = peg$parsepattern()
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__()
            if (s5 !== peg$FAILED) {
              s6 = []
              s7 = peg$currPos
              s8 = peg$parse_()
              if (s8 !== peg$FAILED) {
                s9 = peg$parsepattern()
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7
                  s8 = peg$c77(s1, s4, s9)
                  s7 = s8
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7)
                s7 = peg$currPos
                s8 = peg$parse_()
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsepattern()
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7
                    s8 = peg$c77(s1, s4, s9)
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c78(s1, s4, s6)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          if (s3 === peg$FAILED) {
            s3 = null
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c60
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c61) }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr()
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c79(s1, s3, s6)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseannotation () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12

      s0 = peg$currPos
      s1 = peg$parseref()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c80
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c81) }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos
              s6 = peg$parsetype()
              if (s6 !== peg$FAILED) {
                s7 = []
                s8 = peg$currPos
                s9 = peg$parse_()
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c82) {
                    s10 = peg$c82
                    peg$currPos += 2
                  } else {
                    s10 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c83) }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_()
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsetype()
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s8
                        s9 = peg$c84(s1, s6, s12)
                        s8 = s9
                      } else {
                        peg$currPos = s8
                        s8 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s8
                      s8 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s8
                    s8 = peg$FAILED
                  }
                } else {
                  peg$currPos = s8
                  s8 = peg$FAILED
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8)
                  s8 = peg$currPos
                  s9 = peg$parse_()
                  if (s9 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c82) {
                      s10 = peg$c82
                      peg$currPos += 2
                    } else {
                      s10 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c83) }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_()
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsetype()
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s8
                          s9 = peg$c84(s1, s6, s12)
                          s8 = s9
                        } else {
                          peg$currPos = s8
                          s8 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s8
                        s8 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s8
                      s8 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s8
                    s8 = peg$FAILED
                  }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5
                  s6 = peg$c85(s1, s6, s7)
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c86(s1, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseinfixDef () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.substr(peg$currPos, 6) === peg$c87) {
        s1 = peg$c87
        peg$currPos += 6
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c88) }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c89) {
          s1 = peg$c89
          peg$currPos += 6
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c90) }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c91) {
            s1 = peg$c91
            peg$currPos += 5
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c92) }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebinOp()
              if (s5 === peg$FAILED) {
                s5 = peg$parseinfixOp()
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c93(s1, s3, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseinfixOp () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c94
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c95) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseid()
        if (s2 === peg$FAILED) {
          s2 = peg$parseprefixedId()
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c94
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c95) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c96(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseportDef () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      if (input.substr(peg$currPos, 4) === peg$c8) {
        s1 = peg$c8
        peg$currPos += 4
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c9) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseannotation()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c97(s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetype () {
      var s0

      s0 = peg$parsetypeBracket()
      if (s0 === peg$FAILED) {
        s0 = peg$parseunit()
        if (s0 === peg$FAILED) {
          s0 = peg$parsetypeTuple()
          if (s0 === peg$FAILED) {
            s0 = peg$parsetypeAdt()
            if (s0 === peg$FAILED) {
              s0 = peg$parsetypeVar()
              if (s0 === peg$FAILED) {
                s0 = peg$parsetypeRec()
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetypeRecExt()
                }
              }
            }
          }
        }
      }

      return s0
    }

    function peg$parsetypeTuple () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parsetupleFirst()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parse_()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetupleRem()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3
            s4 = peg$c98(s1, s5)
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$currPos
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetupleRem()
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c98(s1, s5)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          }
        } else {
          s2 = peg$FAILED
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_()
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c33
              peg$currPos++
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c34) }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c99(s1, s2)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetupleFirst () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c31
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c32) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetype()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetypeFunTail()
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c100(s3, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c31
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c32) }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetype()
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c101(s3)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      }

      return s0
    }

    function peg$parsetupleRem () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c39
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c40) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetype()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetypeFunTail()
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c100(s3, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 44) {
          s1 = peg$c39
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c40) }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetype()
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c101(s3)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      }

      return s0
    }

    function peg$parsetypeBracket () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parsetupleFirst()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c33
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c34) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c102(s1)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeFunTail () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

      s0 = peg$currPos
      if (input.substr(peg$currPos, 2) === peg$c82) {
        s1 = peg$c82
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c83) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetype()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = []
              s6 = peg$currPos
              s7 = peg$parse_()
              if (s7 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c82) {
                  s8 = peg$c82
                  peg$currPos += 2
                } else {
                  s8 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c83) }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_()
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsetype()
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s6
                      s7 = peg$c103(s3, s10)
                      s6 = s7
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                s6 = peg$currPos
                s7 = peg$parse_()
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c82) {
                    s8 = peg$c82
                    peg$currPos += 2
                  } else {
                    s8 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c83) }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_()
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetype()
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s6
                        s7 = peg$c103(s3, s10)
                        s6 = s7
                      } else {
                        peg$currPos = s6
                        s6 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c104(s3, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseunit () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c31
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c32) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c33
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c34) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c105()
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeAdt () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8

      s0 = peg$currPos
      s1 = peg$parseupperIds()
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parse__()
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetype()
          if (s4 !== peg$FAILED) {
            s5 = []
            s6 = peg$currPos
            s7 = peg$parse__()
            if (s7 !== peg$FAILED) {
              s8 = peg$parsetype()
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6
                s7 = peg$c106(s1, s4, s8)
                s6 = s7
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              s6 = peg$currPos
              s7 = peg$parse__()
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetype()
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s6
                  s7 = peg$c106(s1, s4, s8)
                  s6 = s7
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s2
              s3 = peg$c107(s1, s4, s5)
              s2 = s3
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
          s2 = null
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c108(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeVar () {
      var s0, s1

      s0 = peg$currPos
      s1 = peg$parseid()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c109(s1)
      }
      s0 = s1

      return s0
    }

    function peg$parsetypeRec () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c17) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          s4 = peg$parsetypeRecBind()
          if (s4 !== peg$FAILED) {
            s5 = []
            s6 = peg$currPos
            s7 = peg$parse_()
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c39
                peg$currPos++
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c40) }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_()
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsetypeRecBind()
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s6
                    s7 = peg$c110(s4, s10)
                    s6 = s7
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              s6 = peg$currPos
              s7 = peg$parse_()
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c39
                  peg$currPos++
                } else {
                  s8 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c40) }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_()
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsetypeRecBind()
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s6
                      s7 = peg$c110(s4, s10)
                      s6 = s7
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c111(s4, s5)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          if (s3 === peg$FAILED) {
            s3 = null
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c18
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c19) }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c112(s3)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeRecExt () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c17) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseid()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s5 = peg$c65
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c66) }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_()
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos
                  s8 = peg$parsetypeRecBind()
                  if (s8 !== peg$FAILED) {
                    s9 = []
                    s10 = peg$currPos
                    s11 = peg$parse_()
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s12 = peg$c39
                        peg$currPos++
                      } else {
                        s12 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c40) }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parse_()
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsetypeRecBind()
                          if (s14 !== peg$FAILED) {
                            peg$savedPos = s10
                            s11 = peg$c113(s3, s8, s14)
                            s10 = s11
                          } else {
                            peg$currPos = s10
                            s10 = peg$FAILED
                          }
                        } else {
                          peg$currPos = s10
                          s10 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s10
                        s10 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s10
                      s10 = peg$FAILED
                    }
                    while (s10 !== peg$FAILED) {
                      s9.push(s10)
                      s10 = peg$currPos
                      s11 = peg$parse_()
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s12 = peg$c39
                          peg$currPos++
                        } else {
                          s12 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c40) }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parse_()
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsetypeRecBind()
                            if (s14 !== peg$FAILED) {
                              peg$savedPos = s10
                              s11 = peg$c113(s3, s8, s14)
                              s10 = s11
                            } else {
                              peg$currPos = s10
                              s10 = peg$FAILED
                            }
                          } else {
                            peg$currPos = s10
                            s10 = peg$FAILED
                          }
                        } else {
                          peg$currPos = s10
                          s10 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s10
                        s10 = peg$FAILED
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7
                      s8 = peg$c114(s3, s8, s9)
                      s7 = s8
                    } else {
                      peg$currPos = s7
                      s7 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_()
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c18
                        peg$currPos++
                      } else {
                        s9 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c19) }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c115(s3, s7)
                        s0 = s1
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsetypeRecBind () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      s1 = peg$parseid()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c80
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c81) }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetype()
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_()
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetypeFunTail()
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c116(s1, s5, s7)
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = peg$parseid()
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c80
              peg$currPos++
            } else {
              s3 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c81) }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_()
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetype()
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c117(s1, s5)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      }

      return s0
    }

    function peg$parsepattern () {
      var s0

      s0 = peg$parsepatternBracket()
      if (s0 === peg$FAILED) {
        s0 = peg$parsepatternTuple()
        if (s0 === peg$FAILED) {
          s0 = peg$parsepatternList()
          if (s0 === peg$FAILED) {
            s0 = peg$parsepatternRec()
            if (s0 === peg$FAILED) {
              s0 = peg$parseunit()
              if (s0 === peg$FAILED) {
                s0 = peg$parsevariable()
                if (s0 === peg$FAILED) {
                  s0 = peg$parsepatternAdt()
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunnamed()
                  }
                }
              }
            }
          }
        }
      }

      return s0
    }

    function peg$parsepatternBracket () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parsepatternTupleFst()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c33
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c34) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c118(s1)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsepatternTuple () {
      var s0, s1, s2, s3, s4

      s0 = peg$currPos
      s1 = peg$parsepatternTupleFst()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsepatternTupleRem()
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3
          s4 = peg$c119(s1, s4)
        }
        s3 = s4
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$currPos
            s4 = peg$parsepatternTupleRem()
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c119(s1, s4)
            }
            s3 = s4
          }
        } else {
          s2 = peg$FAILED
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_()
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c33
              peg$currPos++
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c34) }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c120(s1, s2)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsepatternTupleFst () {
      var s0, s1, s2, s3, s4

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c31
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c32) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepattern()
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepatternAlias()
            if (s4 === peg$FAILED) {
              s4 = null
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c121(s3, s4)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsepatternTupleRem () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parse_()
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c39
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c40) }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_()
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepattern()
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepatternAlias()
              if (s5 === peg$FAILED) {
                s5 = null
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c122(s4, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsepatternAlias () {
      var s0, s1, s2, s3, s4

      s0 = peg$currPos
      s1 = peg$parse__()
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c24) {
          s2 = peg$c24
          peg$currPos += 2
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c25) }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__()
          if (s3 !== peg$FAILED) {
            s4 = peg$parseid()
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c123(s4)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsepatternList () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c124
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c125) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepattern()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              s5 = []
              s6 = peg$currPos
              s7 = peg$parse_()
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c39
                  peg$currPos++
                } else {
                  s8 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c40) }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_()
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsepattern()
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s6
                      s7 = peg$c119(s3, s10)
                      s6 = s7
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                s6 = peg$currPos
                s7 = peg$parse_()
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c39
                    peg$currPos++
                  } else {
                    s8 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c40) }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_()
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsepattern()
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s6
                        s7 = peg$c119(s3, s10)
                        s6 = s7
                      } else {
                        peg$currPos = s6
                        s6 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_()
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s7 = peg$c126
                    peg$currPos++
                  } else {
                    s7 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c127) }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c128(s3, s5)
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsepatternRec () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c17) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          s4 = peg$parsepattern()
          if (s4 !== peg$FAILED) {
            s5 = []
            s6 = peg$currPos
            s7 = peg$parse_()
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c39
                peg$currPos++
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c40) }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_()
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsepattern()
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s6
                    s7 = peg$c119(s4, s10)
                    s6 = s7
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              s6 = peg$currPos
              s7 = peg$parse_()
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c39
                  peg$currPos++
                } else {
                  s8 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c40) }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_()
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsepattern()
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s6
                      s7 = peg$c119(s4, s10)
                      s6 = s7
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c111(s4, s5)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          if (s3 === peg$FAILED) {
            s3 = null
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c18
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c19) }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c129(s3)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsevariable () {
      var s0, s1

      s0 = peg$currPos
      s1 = peg$parseid()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c130(s1)
      }
      s0 = s1

      return s0
    }

    function peg$parsepatternAdt () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parseupperIds()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parse_()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepattern()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3
            s4 = peg$c131(s1, s5)
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepattern()
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c131(s1, s5)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c132(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseunnamed () {
      var s0, s1

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 95) {
        s1 = peg$c133
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c134) }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c135()
      }
      s0 = s1

      return s0
    }

    function peg$parseexpr () {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8

      s0 = peg$currPos
      s1 = []
      s2 = peg$currPos
      s3 = peg$currPos
      peg$silentFails++
      s4 = peg$currPos
      s5 = peg$parseNewLine()
      if (s5 !== peg$FAILED) {
        s6 = peg$parseDocComment()
        if (s6 === peg$FAILED) {
          s6 = peg$parseidchar()
          if (s6 === peg$FAILED) {
            s6 = peg$currPos
            s7 = peg$currPos
            peg$silentFails++
            if (input.substr(peg$currPos, 2) === peg$c136) {
              s8 = peg$c136
              peg$currPos += 2
            } else {
              s8 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c137) }
            }
            peg$silentFails--
            if (s8 === peg$FAILED) {
              s7 = void 0
            } else {
              peg$currPos = s7
              s7 = peg$FAILED
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsebinOpChar()
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8]
                s6 = s7
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
            if (s6 === peg$FAILED) {
              s6 = peg$parsebinOpDef()
            }
          }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6]
          s4 = s5
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
      } else {
        peg$currPos = s4
        s4 = peg$FAILED
      }
      peg$silentFails--
      if (s4 === peg$FAILED) {
        s3 = void 0
      } else {
        peg$currPos = s3
        s3 = peg$FAILED
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseMultiLineComment()
        if (s4 === peg$FAILED) {
          s4 = peg$parseMultiLineString()
          if (s4 === peg$FAILED) {
            s4 = peg$parseSourceCharacter()
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4]
          s2 = s3
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2)
        s2 = peg$currPos
        s3 = peg$currPos
        peg$silentFails++
        s4 = peg$currPos
        s5 = peg$parseNewLine()
        if (s5 !== peg$FAILED) {
          s6 = peg$parseDocComment()
          if (s6 === peg$FAILED) {
            s6 = peg$parseidchar()
            if (s6 === peg$FAILED) {
              s6 = peg$currPos
              s7 = peg$currPos
              peg$silentFails++
              if (input.substr(peg$currPos, 2) === peg$c136) {
                s8 = peg$c136
                peg$currPos += 2
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c137) }
              }
              peg$silentFails--
              if (s8 === peg$FAILED) {
                s7 = void 0
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsebinOpChar()
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8]
                  s6 = s7
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
              if (s6 === peg$FAILED) {
                s6 = peg$parsebinOpDef()
              }
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6]
            s4 = s5
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        peg$silentFails--
        if (s4 === peg$FAILED) {
          s3 = void 0
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMultiLineComment()
          if (s4 === peg$FAILED) {
            s4 = peg$parseMultiLineString()
            if (s4 === peg$FAILED) {
              s4 = peg$parseSourceCharacter()
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4]
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c138(s1)
      }
      s0 = s1

      return s0
    }

    function peg$parseref () {
      var s0, s1

      s0 = peg$currPos
      s1 = peg$parseid()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c139(s1)
      }
      s0 = s1
      if (s0 === peg$FAILED) {
        s0 = peg$parsebinOpRef()
      }

      return s0
    }

    function peg$parseupperIds () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parseupperId()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c140
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c141) }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseupperId()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c140
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c141) }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseupperId()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c142(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseupperId () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parseupper()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parseidchar()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parseidchar()
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c143(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseprefixedId () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parseupperIds()
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c140
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c141) }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidName()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c144(s1, s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseid () {
      var s0, s1, s2

      s0 = peg$currPos
      s1 = peg$currPos
      peg$silentFails++
      s2 = peg$parsereserved()
      peg$silentFails--
      if (s2 === peg$FAILED) {
        s1 = void 0
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidName()
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c145(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseidName () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parselower()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parseidchar()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parseidchar()
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c143(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseComment () {
      var s0, s1

      peg$silentFails++
      s0 = peg$parseMultiLineComment()
      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment()
      }
      peg$silentFails--
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c146) }
      }

      return s0
    }

    function peg$parseDocComment () {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      if (input.substr(peg$currPos, 3) === peg$c147) {
        s1 = peg$c147
        peg$currPos += 3
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c148) }
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$currPos
        peg$silentFails++
        if (input.substr(peg$currPos, 2) === peg$c149) {
          s5 = peg$c149
          peg$currPos += 2
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c150) }
        }
        peg$silentFails--
        if (s5 === peg$FAILED) {
          s4 = void 0
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos
          s6 = peg$parseDocComment()
          if (s6 !== peg$FAILED) {
            peg$savedPos = s5
            s6 = peg$c151(s6)
          }
          s5 = s6
          if (s5 === peg$FAILED) {
            s5 = peg$currPos
            s6 = peg$parseMultiLineComment()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c152(s6)
            }
            s5 = s6
            if (s5 === peg$FAILED) {
              s5 = peg$currPos
              s6 = peg$parseSourceCharacter()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5
                s6 = peg$c153(s6)
              }
              s5 = s6
            }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3
            s4 = peg$c154(s5)
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$currPos
          peg$silentFails++
          if (input.substr(peg$currPos, 2) === peg$c149) {
            s5 = peg$c149
            peg$currPos += 2
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c150) }
          }
          peg$silentFails--
          if (s5 === peg$FAILED) {
            s4 = void 0
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos
            s6 = peg$parseDocComment()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c151(s6)
            }
            s5 = s6
            if (s5 === peg$FAILED) {
              s5 = peg$currPos
              s6 = peg$parseMultiLineComment()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5
                s6 = peg$c152(s6)
              }
              s5 = s6
              if (s5 === peg$FAILED) {
                s5 = peg$currPos
                s6 = peg$parseSourceCharacter()
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s5
                  s6 = peg$c153(s6)
                }
                s5 = s6
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c154(s5)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c149) {
            s3 = peg$c149
            peg$currPos += 2
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c150) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c155(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseMultiLineComment () {
      var s0, s1, s2, s3, s4, s5, s6, s7

      s0 = peg$currPos
      if (input.substr(peg$currPos, 2) === peg$c156) {
        s1 = peg$c156
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c157) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        peg$silentFails++
        if (input.charCodeAt(peg$currPos) === 124) {
          s3 = peg$c65
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c66) }
        }
        peg$silentFails--
        if (s3 === peg$FAILED) {
          s2 = void 0
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 !== peg$FAILED) {
          s3 = []
          s4 = peg$currPos
          s5 = peg$currPos
          peg$silentFails++
          if (input.substr(peg$currPos, 2) === peg$c149) {
            s6 = peg$c149
            peg$currPos += 2
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c150) }
          }
          peg$silentFails--
          if (s6 === peg$FAILED) {
            s5 = void 0
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos
            s7 = peg$parseDocComment()
            if (s7 !== peg$FAILED) {
              peg$savedPos = s6
              s7 = peg$c158(s7)
            }
            s6 = s7
            if (s6 === peg$FAILED) {
              s6 = peg$currPos
              s7 = peg$parseMultiLineComment()
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6
                s7 = peg$c152(s7)
              }
              s6 = s7
              if (s6 === peg$FAILED) {
                s6 = peg$currPos
                s7 = peg$parseSourceCharacter()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6
                  s7 = peg$c153(s7)
                }
                s6 = s7
              }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c159(s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            s4 = peg$currPos
            s5 = peg$currPos
            peg$silentFails++
            if (input.substr(peg$currPos, 2) === peg$c149) {
              s6 = peg$c149
              peg$currPos += 2
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c150) }
            }
            peg$silentFails--
            if (s6 === peg$FAILED) {
              s5 = void 0
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos
              s7 = peg$parseDocComment()
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6
                s7 = peg$c158(s7)
              }
              s6 = s7
              if (s6 === peg$FAILED) {
                s6 = peg$currPos
                s7 = peg$parseMultiLineComment()
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6
                  s7 = peg$c152(s7)
                }
                s6 = s7
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos
                  s7 = peg$parseSourceCharacter()
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6
                    s7 = peg$c153(s7)
                  }
                  s6 = s7
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4
                s5 = peg$c159(s6)
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c149) {
              s4 = peg$c149
              peg$currPos += 2
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c150) }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c160(s3)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseMultiLineCommentNoLineTerminator () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.substr(peg$currPos, 2) === peg$c156) {
        s1 = peg$c156
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c157) }
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$currPos
        peg$silentFails++
        if (input.substr(peg$currPos, 2) === peg$c149) {
          s5 = peg$c149
          peg$currPos += 2
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c150) }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator()
        }
        peg$silentFails--
        if (s5 === peg$FAILED) {
          s4 = void 0
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$currPos
          peg$silentFails++
          if (input.substr(peg$currPos, 2) === peg$c149) {
            s5 = peg$c149
            peg$currPos += 2
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c150) }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator()
          }
          peg$silentFails--
          if (s5 === peg$FAILED) {
            s4 = void 0
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c149) {
            s3 = peg$c149
            peg$currPos += 2
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c150) }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3]
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseSingleLineComment () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.substr(peg$currPos, 2) === peg$c136) {
        s1 = peg$c136
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c137) }
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$currPos
        peg$silentFails++
        s5 = peg$parseLineTerminator()
        peg$silentFails--
        if (s5 === peg$FAILED) {
          s4 = void 0
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$currPos
          peg$silentFails++
          s5 = peg$parseLineTerminator()
          peg$silentFails--
          if (s5 === peg$FAILED) {
            s4 = void 0
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseMultiLineString () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.substr(peg$currPos, 3) === peg$c161) {
        s1 = peg$c161
        peg$currPos += 3
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c162) }
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$currPos
        peg$silentFails++
        if (input.substr(peg$currPos, 3) === peg$c161) {
          s5 = peg$c161
          peg$currPos += 3
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c162) }
        }
        peg$silentFails--
        if (s5 === peg$FAILED) {
          s4 = void 0
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$currPos
          peg$silentFails++
          if (input.substr(peg$currPos, 3) === peg$c161) {
            s5 = peg$c161
            peg$currPos += 3
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c162) }
          }
          peg$silentFails--
          if (s5 === peg$FAILED) {
            s4 = void 0
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c161) {
            s3 = peg$c161
            peg$currPos += 3
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c162) }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3]
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsereserved () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      if (input.substr(peg$currPos, 6) === peg$c11) {
        s1 = peg$c11
        peg$currPos += 6
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c12) }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c55) {
          s1 = peg$c55
          peg$currPos += 4
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c56) }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c29) {
            s1 = peg$c29
            peg$currPos += 8
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c30) }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c22) {
              s1 = peg$c22
              peg$currPos += 6
            } else {
              s1 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c23) }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c8) {
                s1 = peg$c8
                peg$currPos += 4
              } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c9) }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c163) {
                  s1 = peg$c163
                  peg$currPos += 2
                } else {
                  s1 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c164) }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c165) {
                    s1 = peg$c165
                    peg$currPos += 4
                  } else {
                    s1 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c166) }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c167) {
                      s1 = peg$c167
                      peg$currPos += 4
                    } else {
                      s1 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c168) }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c169) {
                        s1 = peg$c169
                        peg$currPos += 3
                      } else {
                        s1 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c170) }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c171) {
                          s1 = peg$c171
                          peg$currPos += 2
                        } else {
                          s1 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c172) }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c173) {
                            s1 = peg$c173
                            peg$currPos += 4
                          } else {
                            s1 = peg$FAILED
                            if (peg$silentFails === 0) { peg$fail(peg$c174) }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c175) {
                              s1 = peg$c175
                              peg$currPos += 2
                            } else {
                              s1 = peg$FAILED
                              if (peg$silentFails === 0) { peg$fail(peg$c176) }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c24) {
                                s1 = peg$c24
                                peg$currPos += 2
                              } else {
                                s1 = peg$FAILED
                                if (peg$silentFails === 0) { peg$fail(peg$c25) }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c91) {
                                  s1 = peg$c91
                                  peg$currPos += 5
                                } else {
                                  s1 = peg$FAILED
                                  if (peg$silentFails === 0) { peg$fail(peg$c92) }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 6) === peg$c89) {
                                    s1 = peg$c89
                                    peg$currPos += 6
                                  } else {
                                    s1 = peg$FAILED
                                    if (peg$silentFails === 0) { peg$fail(peg$c90) }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c87) {
                                      s1 = peg$c87
                                      peg$currPos += 6
                                    } else {
                                      s1 = peg$FAILED
                                      if (peg$silentFails === 0) { peg$fail(peg$c88) }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        peg$silentFails++
        s3 = peg$parseidchar()
        peg$silentFails--
        if (s3 === peg$FAILED) {
          s2 = void 0
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseidchar () {
      var s0

      s0 = peg$parseupper()
      if (s0 === peg$FAILED) {
        s0 = peg$parselower()
        if (s0 === peg$FAILED) {
          s0 = peg$parsenumber()
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s0 = peg$c133
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c134) }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s0 = peg$c177
                peg$currPos++
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c178) }
              }
            }
          }
        }
      }

      return s0
    }

    function peg$parseupper () {
      var s0

      if (peg$c179.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c180) }
      }

      return s0
    }

    function peg$parselower () {
      var s0

      if (peg$c181.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c182) }
      }

      return s0
    }

    function peg$parsenumber () {
      var s0

      if (peg$c183.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c184) }
      }

      return s0
    }

    function peg$parsebinOpRef () {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c31
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c32) }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebinOp()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c33
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c34) }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c185(s3)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsebinOp () {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parsebinOpChar()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parsebinOpChar()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parsebinOpChar()
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c186(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsebinOpChar () {
      var s0

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c187
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c188) }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c189
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c190) }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s0 = peg$c191
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c192) }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s0 = peg$c193
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c194) }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s0 = peg$c195
                peg$currPos++
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c196) }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 94) {
                  s0 = peg$c197
                  peg$currPos++
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c198) }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s0 = peg$c199
                    peg$currPos++
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c200) }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s0 = peg$c201
                      peg$currPos++
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c202) }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 124) {
                        s0 = peg$c65
                        peg$currPos++
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c66) }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s0 = peg$c60
                          peg$currPos++
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c61) }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 36) {
                            s0 = peg$c203
                            peg$currPos++
                          } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) { peg$fail(peg$c204) }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 64) {
                              s0 = peg$c205
                              peg$currPos++
                            } else {
                              s0 = peg$FAILED
                              if (peg$silentFails === 0) { peg$fail(peg$c206) }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 35) {
                                s0 = peg$c207
                                peg$currPos++
                              } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) { peg$fail(peg$c208) }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 47) {
                                  s0 = peg$c209
                                  peg$currPos++
                                } else {
                                  s0 = peg$FAILED
                                  if (peg$silentFails === 0) { peg$fail(peg$c210) }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s0 = peg$c80
                                    peg$currPos++
                                  } else {
                                    s0 = peg$FAILED
                                    if (peg$silentFails === 0) { peg$fail(peg$c81) }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 63) {
                                      s0 = peg$c211
                                      peg$currPos++
                                    } else {
                                      s0 = peg$FAILED
                                      if (peg$silentFails === 0) { peg$fail(peg$c212) }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 126) {
                                        s0 = peg$c213
                                        peg$currPos++
                                      } else {
                                        s0 = peg$FAILED
                                        if (peg$silentFails === 0) { peg$fail(peg$c214) }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 33) {
                                          s0 = peg$c215
                                          peg$currPos++
                                        } else {
                                          s0 = peg$FAILED
                                          if (peg$silentFails === 0) { peg$fail(peg$c216) }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 46) {
                                            s0 = peg$c140
                                            peg$currPos++
                                          } else {
                                            s0 = peg$FAILED
                                            if (peg$silentFails === 0) { peg$fail(peg$c141) }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0
    }

    function peg$parseLineTerminator () {
      var s0

      if (peg$c217.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c218) }
      }

      return s0
    }

    function peg$parseLineTerminatorSequence () {
      var s0, s1

      peg$silentFails++
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c220
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c221) }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c222) {
          s0 = peg$c222
          peg$currPos += 2
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c223) }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c224
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c225) }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c226
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c227) }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c228
                peg$currPos++
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c229) }
              }
            }
          }
        }
      }
      peg$silentFails--
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c219) }
      }

      return s0
    }

    function peg$parseMANDATORY_LAYOUT () {
      var s0, s1, s2, s3, s4

      s0 = []
      s1 = peg$parseNewLine()
      if (s1 === peg$FAILED) {
        s1 = peg$currPos
        s2 = peg$parseMultiLineComment()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOS()
          if (s3 !== peg$FAILED) {
            s4 = peg$parseNewLine()
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4]
              s1 = s2
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          } else {
            peg$currPos = s1
            s1 = peg$FAILED
          }
        } else {
          peg$currPos = s1
          s1 = peg$FAILED
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos
          s2 = peg$parseEOS()
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNewLine()
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3]
              s1 = s2
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          } else {
            peg$currPos = s1
            s1 = peg$FAILED
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1)
          s1 = peg$parseNewLine()
          if (s1 === peg$FAILED) {
            s1 = peg$currPos
            s2 = peg$parseMultiLineComment()
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEOS()
              if (s3 !== peg$FAILED) {
                s4 = peg$parseNewLine()
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4]
                  s1 = s2
                } else {
                  peg$currPos = s1
                  s1 = peg$FAILED
                }
              } else {
                peg$currPos = s1
                s1 = peg$FAILED
              }
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos
              s2 = peg$parseEOS()
              if (s2 !== peg$FAILED) {
                s3 = peg$parseNewLine()
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3]
                  s1 = s2
                } else {
                  peg$currPos = s1
                  s1 = peg$FAILED
                }
              } else {
                peg$currPos = s1
                s1 = peg$FAILED
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseLAYOUT () {
      var s0, s1, s2, s3, s4

      s0 = []
      s1 = peg$parseNewLine()
      if (s1 === peg$FAILED) {
        s1 = peg$currPos
        s2 = peg$parseMultiLineComment()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOS()
          if (s3 !== peg$FAILED) {
            s4 = peg$parseNewLine()
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4]
              s1 = s2
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          } else {
            peg$currPos = s1
            s1 = peg$FAILED
          }
        } else {
          peg$currPos = s1
          s1 = peg$FAILED
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos
          s2 = peg$parseEOS()
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNewLine()
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3]
              s1 = s2
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          } else {
            peg$currPos = s1
            s1 = peg$FAILED
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1)
        s1 = peg$parseNewLine()
        if (s1 === peg$FAILED) {
          s1 = peg$currPos
          s2 = peg$parseMultiLineComment()
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEOS()
            if (s3 !== peg$FAILED) {
              s4 = peg$parseNewLine()
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4]
                s1 = s2
              } else {
                peg$currPos = s1
                s1 = peg$FAILED
              }
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          } else {
            peg$currPos = s1
            s1 = peg$FAILED
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos
            s2 = peg$parseEOS()
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNewLine()
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
              } else {
                peg$currPos = s1
                s1 = peg$FAILED
              }
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          }
        }
      }

      return s0
    }

    function peg$parseEOS () {
      var s0, s1, s2

      s0 = peg$currPos
      s1 = []
      s2 = peg$parseWhiteSpace()
      if (s2 === peg$FAILED) {
        s2 = peg$parseMultiLineComment()
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2)
        s2 = peg$parseWhiteSpace()
        if (s2 === peg$FAILED) {
          s2 = peg$parseMultiLineComment()
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSingleLineComment()
        if (s2 === peg$FAILED) {
          s2 = null
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseEOF () {
      var s0, s1

      s0 = peg$currPos
      peg$silentFails++
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c4) }
      }
      peg$silentFails--
      if (s1 === peg$FAILED) {
        s0 = void 0
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseNewLine () {
      var s0, s1

      peg$silentFails++
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c220
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c221) }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c222) {
          s0 = peg$c222
          peg$currPos += 2
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c223) }
        }
      }
      peg$silentFails--
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c230) }
      }

      return s0
    }

    function peg$parse__ () {
      var s0, s1

      s0 = []
      s1 = peg$parsews_ignores()
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1)
          s1 = peg$parsews_ignores()
        }
      } else {
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parse_ () {
      var s0, s1

      s0 = []
      s1 = peg$parsews_ignores()
      while (s1 !== peg$FAILED) {
        s0.push(s1)
        s1 = peg$parsews_ignores()
      }

      return s0
    }

    function peg$parsews_ignores () {
      var s0, s1, s2, s3

      s0 = peg$parseWhiteSpace()
      if (s0 === peg$FAILED) {
        s0 = peg$parseMultiLineComment()
        if (s0 === peg$FAILED) {
          s0 = peg$currPos
          s1 = peg$parseSingleLineComment()
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseNewLine()
            peg$silentFails--
            if (s3 !== peg$FAILED) {
              peg$currPos = s2
              s2 = void 0
            } else {
              s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseNewLine()
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos
              peg$silentFails++
              s3 = peg$parseNewLine()
              if (s3 === peg$FAILED) {
                s3 = peg$parseMultiLineComment()
                if (s3 === peg$FAILED) {
                  s3 = peg$parseSingleLineComment()
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseWhiteSpace()
                  }
                }
              }
              peg$silentFails--
              if (s3 !== peg$FAILED) {
                peg$currPos = s2
                s2 = void 0
              } else {
                s2 = peg$FAILED
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          }
        }
      }

      return s0
    }

    function peg$parseWhiteSpace () {
      var s0, s1

      peg$silentFails++
      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c232
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c233) }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c234
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c235) }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c236
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c237) }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c238
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c239) }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c240
                peg$currPos++
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c241) }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c242
                  peg$currPos++
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c243) }
                }
              }
            }
          }
        }
      }
      peg$silentFails--
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c231) }
      }

      return s0
    }

    function peg$parseSourceCharacter () {
      var s0

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c4) }
      }

      return s0
    }

    function placeholder () {
    }

    function validateBinOp (binOp) {
      	if (['|', '->', '--', '=', ':', '..'].indexOf(binOp) > -1) {
        error(binOp + ' is an illegal binop')
      }
    }

    peg$result = peg$startRuleFunction()

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: 'end', description: 'end of input' })
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      )
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  }
})()
